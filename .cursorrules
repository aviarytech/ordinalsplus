# BTCO DID Explorer Guidelines

## Project Overview
A comprehensive solution for exploring Bitcoin Ordinals DIDs (Decentralized Identifiers) and linked resources, allowing users to browse and filter inscriptions on the Bitcoin blockchain. The project consists of three main components:

1. **ordinalsplus**: Core library with shared functionality for working with Bitcoin Ordinals DIDs
2. **ordinals-plus-api**: Backend API service that interfaces with the Bitcoin blockchain via Ord node and Ordiscan
3. **ordinals-plus-explorer**: Frontend web application for exploring and visualizing DIDs and resources

## Tech & Style Requirements
- **Stack**: React, TypeScript, Tailwind CSS
- **API**: Integration with Ord node and Ordiscan API
- **Icons**: Use lucide-react for icons (avoid SVGs)
- **Styling**:
  - Exclusive use of Tailwind inline styles (NO custom CSS or CSS-in-JS)
  - Ensure dark mode support with dark: prefixes
  - Blue/indigo gradients for section headers
  - Card-based UI for resources

## Code Guidelines
- Keep components focused on single responsibilities
- Use TypeScript interfaces for all data models
- Prefer functional components with hooks
- Handle API loading and error states gracefully

## Blockchain Context
- DIDs are decentralized identifiers inscribed on Bitcoin (format: did:btco:*)
- Resources are linked to DIDs and contain various content types
- Inscriptions represent on-chain data via the Ordinals protocol
- Display resource types distinctly based on content

## UI/UX Requirements
- Filter controls should use pill styles
- Toggle switches need clear on/off states
- Cards should have subtle shadows and rounded corners
- Always provide loading state feedback
- Truncate long inscription IDs with ellipsis

## Project Structure
### Overall Architecture
- **ordinalsplus/**: Core library with shared types and utilities
- **ordinals-plus-api/**: Backend API service (Elysia.js)
- **ordinals-plus-explorer/**: Frontend application (React, TypeScript, Tailwind)

### Frontend Structure
- `/src/components/`: UI components (DidExplorer, LinkedResourceViewer)
- `/src/services/`: API and blockchain integration
- `/src/types/`: TypeScript interfaces
- `/src/utils/`: Helper functions